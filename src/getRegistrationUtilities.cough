{ isArray } = require './utilities'

module.exports = \config ->
  { connect, createEventStreamBus, createNonInitPropertyBus } = config

  disconnectors = {}
  dispatchers   = {}
  plugs         = {}

  deleteDispatcher = \label ->
    free label
    delete dispatchers[label]
    delete plugs[label]

  free = \label ->
    for own key, disconnect of disconnectors[label]
      disconnect ()

  getDispatcher = (label, eventstream?) ->
    getBus = if eventstream? then getEventStream else getProperty
    dispatchers[label] || getBus label

  matchesExistingDispatcher? = \label ->
    !! dispatchers[label]

  _register = (busFactory, label) ->
    id = 0

    bus = dispatchers[label] = busFactory ()
    bus.setAlias label

    load = \observable ->
      _unplug = connect (observable, bus)

      observable-id = id

      unplug = ->
        delete disconnectors[label][observable-id]
        _unplug ()

      disconnectors[label] ?= {}
      disconnectors[label][observable-id] = unplug

      id += 1

      unplug

    plugs[label] = load

    bus

  register = (busFactory) -> (label/s) ->
    switch
      when isArray label/s
        label/s.map (register busFactory)
      when matchesExistingDispatcher? label/s
        dispatchers[label/s]
      else
        _register (busFactory, label/s)

  {
    deleteDispatcher
    getDispatcher
    getEventStream : register createEventStreamBus
    getProperty    : register createNonInitPropertyBus
  }
