{ getInjectedFactory } = require './factory-injector.js'
{ isFunction }         = require './utilities.js'

handlerRegex = /^on[A-Z]/

handler? = \val ->
  handlerRegex.test val

getAdapter = \record ->
  [defaultEventType, ensureProps, reactFactory, adapterType] = record
  getInjectedFactory (
    getTemplate (defaultEventType, ensureProps, reactFactory)
    adapterType
  )

getTemplate = (defaultEventType, ensureProps, reactFactory) ->
  _inject = inject (defaultEventType, ensureProps)

  # TODO: Consider adding a 'type' property to the inner function,
  # a property that is a string so that React interprets it as an
  # ordinary 'ReactDOMComponent'.
  (getHandlerForType) -> (props, components...) ->
    newProps = _inject (getHandlerForType, props)
    reactFactory (newProps, components...)

inject = (defaultEventType, ensureProps) -> (getHandlerForType, props) ->
  needsHandler? = true
  newProps = ensureProps props
  for own key, value of newProps
    if handler? key
      needsHandler? = false
      newProps[key] = getHandlerForType key unless isFunction value
  if needsHandler?
    newProps[defaultEventType] = getHandlerForType defaultEventType
  newProps

module.exports = { getAdapter }
