{ getInjectedFactory }         = require './factory-injector.js'
{ createClass, createFactory } = require '../react-with-addons.js'

encapsulateInfo = \state ->
  { component: this, state }

sensitiveRenderMixin = \getHandlerForType ->
  trigger = \state ->
    getHandlerForType 'onStateChange' (encapsulateInfo state)

  componentDidMount         : -> trigger 'didMount'
  componentDidUpdate        : -> trigger 'didUpdate'
  componentWillMount        : -> trigger 'willMount'
  componentWillReceiveProps : -> trigger 'willReceiveProps'
  componentWillUnmount      : -> trigger 'willUnmount'
  componentWillUpdate       : -> trigger 'willUpdate'

template = (getHandlerForType) -> (factory) -> (args...) ->
  properties =
    mixins : [sensitiveRenderMixin getHandlerForType]
    render : -> factory args...
  createFactory (createClass properties) ()

sensitize = getInjectedFactory (template, 'sensitive')

module.exports = sensitize
