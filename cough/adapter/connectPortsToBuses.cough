{ connectBus }                  = require './port-registrar.js'
{ getEventStream, getProperty } = require '../controller/channel-registrar.js'
reactIntake                     = require './react-intake.js'

eventStreamRegex = /^\$/

switches = []

actAsSwitchboard = \event ->
  for swich in switches
    { condition, dispatch } = swich
    return dispatch event if condition event

connectPortsToBuses = \triplets ->
  triplets.forEach connectIntakeToTarget

connectIntakeToTarget = ([tgtBusLabel, reactViewLabel, type, handler]) ->
  dispatcher = getDispatcher tgtBusLabel
  switches.push
    condition : getFilter (reactViewLabel, type, handler)
    dispatch  : dispatchBy dispatcher

dispatchBy = \bus \capsule ->
  targetValue = getTargetValue capsule
  val = if targetValue then targetValue else capsule
  bus.dispatch (val, bus.id)

eventStreamName? = \val ->
  eventStreamRegex.test val

getDispatcher = \label ->
  interpret = if eventStreamName? label then getEventStream else getProperty
  interpret label

getFilter = (label, type, handler) -> (val) ->
  val.label == label &&
      (!type || val.type == type) &&
      (!handler || val.handler == handler)

getTargetValue = \capsule ->
  capsule|['event']|['target']|['value']

reactIntakeBus = connectBus reactIntake
reactIntakeBus.subscribe actAsSwitchboard

module.exports = connectPortsToBuses 
