{ addComponent, getComponent } = require '../utilities.js'
{ createEventStreamBus }       = require '../pando.js'

keypaths = {}
ports    = {}

busExt  = '.bus'
portExt = '.port'

connectPortComponent = \extension \keypath ->
  register keypath unless keypaths[keypath]
  getPortComponent (extension, keypath)

# Wny not simpler? Like `ports[label][extension]`?
getPortComponent = (extension, keypath) ->
  getComponent ((keypath + extension), ports)

register = \keypath ->
  bus = createEventStreamBus ()
  bus.setAlias keypath
  port = \val -> bus.dispatch (val, bus.id)
  addComponent (keypath, { bus, port }, ports)
  keypaths[keypath] = true

[connectBus, connectPort] = [busExt, portExt].map connectPortComponent

module.exports = { connectBus, connectPort }

###
# This function shouldn't be directly included in this file.
blur = \capsule ->
  capsule.event.target.blur () if capsule.type == 'link'

# This function shouldn't be directly included in this file.
preventDefault = \capsule ->
  capsule.event.preventDefault () if capsule.event.preventDefault

# These subscriptions perhaps shouldn't be directly included here.
# As a side effect, these two subscriptions activate the principal bus.
onValue preventDefault bus
onValue blur bus
###
